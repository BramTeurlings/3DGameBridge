cmake_minimum_required(VERSION 3.23)

project (3DGameBridge VERSION 0.1)
message("3D Game Bridge Version: ${3DGameBridge_VERSION}")

set(CMAKE_DEBUG_POSTFIX d)

add_library(3DGameBridge SHARED
		src/game_bridge.h
        src/game_bridge.cpp
		src/event_system/event_manager.h
		src/event_system/event_manager.cpp
		src/event_system/game_event_manager_interface.h src/game_bridge.h unit_tests/main.cpp src/hotkey_system/hotkey_manager.h src/hotkey_system/hotkeys_interface.h src/platform_system/platform_manager.h src/weavers/directx_11_weaver.h src/weavers/weaver_flags.h src/weavers/directx_12_weaver.h)

target_compile_definitions(3DGameBridge PUBLIC GAME_BRIDGE_API_EXPORTS)
set_target_properties(3DGameBridge PROPERTIES LINKER_LANGUAGE CXX)

set_target_properties(3DGameBridge PROPERTIES PUBLIC_HEADER src/game_bridge.h)

install(TARGETS 3DGameBridge
        EXPORT 3DGameBridgeTargets
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        PUBLIC_HEADER DESTINATION include)

install(EXPORT 3DGameBridgeTargets
		FILE 3DGameBridgeTargets.cmake
		DESTINATION lib/cmake/3DGameBridge
)

target_include_directories(3DGameBridge INTERFACE
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src>
	$<INSTALL_INTERFACE:include>
)

# Todo: Check if this is correct
set(TARGET_DXHEADERS DirectX-Headers)
add_subdirectory(third-party/DirectX-Headers)
target_link_libraries(${PROJECT_NAME} PRIVATE ${TARGET_DXHEADERS})

find_package(simulatedreality REQUIRED)
find_package(srDirectX REQUIRED)

include(CMakePackageConfigHelpers)
configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/3DGameBridgeConfig.cmake
    INSTALL_DESTINATION lib/cmake/3DGameBridge
)

write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/3DGameBridgeConfigVersion.cmake"
  VERSION "${3DGameBridge_VERSION}"
  COMPATIBILITY AnyNewerVersion
)

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/GameBridgeConfig.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/GameBridgeConfigVersion.cmake
  DESTINATION lib/cmake/3DGameBridge
)

# Option to build unit tests project
option(BUILD_UNIT_TESTS "Enabled the unit_tests project")
if(BUILD_UNIT_TESTS)
	message("Building unit tests")
	add_subdirectory(unit_tests)
endif()

target_link_libraries(${PROJECT_NAME} PRIVATE
		simulatedreality
		srDirectX::srDirectX
		)
